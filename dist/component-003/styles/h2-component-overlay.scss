// Hydrogen / Component / Version
// This file is processed and built so that the component can be used as an isolated, versioned tool.

// This file is compiled after it's been moved by the Gulp build script because the idea is that you can load the Sass from the versioned node_module OR simply use the compiled CSS if you don't care about themeing the component through Hydrogen.

// Forward the theme variables from the processed, nested core files.
@forward "core/defaults";

// Load map variables from the core module so that the component can leverage them when generating selectors.
@use "core/maps" as maps;

// Load the theme variables from the nested core files so that they can be passed to property mixins.
@use "core/defaults" as var;

// Load the core itself so that its mixins can be accessed and subsequently nested inside the component attribute (this prevents the core from being loaded on the project outside of places it should be).
@use "core/core" as core;

// // Load the component so that its mixins can be accessed.
@use "component-overlay" as *;

// Load the core and component mixins within the versioned component attribute, while passing them their respective theme variables.
// -003 is replaced during the Gulp build script with the current component version, set in Gulpfile.js, before Sass is compiled.
[data-h2-overlay-003] {
    // Load the component's unique reset styles.
    @include h2-component-overlay-reset();
    // Load the core.
    @include core.h2-universal-reset;
    // Load the generic component mixin.
    @include h2-component-overlay-generic();
}

// Load custom mixins here. Please refer to existing components for examples, as well as how to pass variables, maps, and functions. Don't forget to include "-003" at the end of each reference to your component attribute.

// e.g. data-h2-accordion-003

[data-h2-overlay-003*="image"] {
    @include h2-component-overlay-image();
}

[data-h2-overlay-003*="pattern"] {
    @include h2-component-overlay-pattern();
}

@each $colorKey, $colorValue in maps.$color-map {
    [data-h2-overlay-003*="#{$colorKey}"] {
        @include h2-component-overlay-color(
            $color: $colorValue
        );
    }
}

@each $alphaKey, $alphaValue in maps.$opacity-map {
    [data-h2-overlay-003*="#{$alphaKey}"] {
        @include h2-component-overlay-opacity(
            $opacity: $alphaValue
        );
    }
}